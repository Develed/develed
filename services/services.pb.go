// Code generated by protoc-gen-go.
// source: services.proto
// DO NOT EDIT!

/*
Package services is a generated protocol buffer package.

It is generated from these files:
	services.proto

It has these top-level messages:
	DrawRequest
	DrawResponse
	TextRequest
	TextResponse
	ImageRequest
	ImageResponse
*/
package services

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DrawRequest struct {
	Priority int64  `protobuf:"varint,1,opt,name=priority" json:"priority,omitempty"`
	Timeslot int64  `protobuf:"varint,2,opt,name=timeslot" json:"timeslot,omitempty"`
	Data     []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DrawRequest) Reset()                    { *m = DrawRequest{} }
func (m *DrawRequest) String() string            { return proto.CompactTextString(m) }
func (*DrawRequest) ProtoMessage()               {}
func (*DrawRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DrawRequest) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *DrawRequest) GetTimeslot() int64 {
	if m != nil {
		return m.Timeslot
	}
	return 0
}

func (m *DrawRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type DrawResponse struct {
	Code   int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *DrawResponse) Reset()                    { *m = DrawResponse{} }
func (m *DrawResponse) String() string            { return proto.CompactTextString(m) }
func (*DrawResponse) ProtoMessage()               {}
func (*DrawResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DrawResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DrawResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type TextRequest struct {
	Text      string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Font      string `protobuf:"bytes,2,opt,name=font" json:"font,omitempty"`
	FontColor int64  `protobuf:"varint,3,opt,name=font_color,json=fontColor" json:"font_color,omitempty"`
	FontBg    int64  `protobuf:"varint,4,opt,name=font_bg,json=fontBg" json:"font_bg,omitempty"`
}

func (m *TextRequest) Reset()                    { *m = TextRequest{} }
func (m *TextRequest) String() string            { return proto.CompactTextString(m) }
func (*TextRequest) ProtoMessage()               {}
func (*TextRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TextRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *TextRequest) GetFont() string {
	if m != nil {
		return m.Font
	}
	return ""
}

func (m *TextRequest) GetFontColor() int64 {
	if m != nil {
		return m.FontColor
	}
	return 0
}

func (m *TextRequest) GetFontBg() int64 {
	if m != nil {
		return m.FontBg
	}
	return 0
}

type TextResponse struct {
	Code   int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *TextResponse) Reset()                    { *m = TextResponse{} }
func (m *TextResponse) String() string            { return proto.CompactTextString(m) }
func (*TextResponse) ProtoMessage()               {}
func (*TextResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TextResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *TextResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type ImageRequest struct {
	// Types that are valid to be assigned to Source:
	//	*ImageRequest_Url
	//	*ImageRequest_Data
	Source isImageRequest_Source `protobuf_oneof:"source"`
}

func (m *ImageRequest) Reset()                    { *m = ImageRequest{} }
func (m *ImageRequest) String() string            { return proto.CompactTextString(m) }
func (*ImageRequest) ProtoMessage()               {}
func (*ImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isImageRequest_Source interface {
	isImageRequest_Source()
}

type ImageRequest_Url struct {
	Url string `protobuf:"bytes,1,opt,name=url,oneof"`
}
type ImageRequest_Data struct {
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*ImageRequest_Url) isImageRequest_Source()  {}
func (*ImageRequest_Data) isImageRequest_Source() {}

func (m *ImageRequest) GetSource() isImageRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ImageRequest) GetUrl() string {
	if x, ok := m.GetSource().(*ImageRequest_Url); ok {
		return x.Url
	}
	return ""
}

func (m *ImageRequest) GetData() []byte {
	if x, ok := m.GetSource().(*ImageRequest_Data); ok {
		return x.Data
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ImageRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ImageRequest_OneofMarshaler, _ImageRequest_OneofUnmarshaler, _ImageRequest_OneofSizer, []interface{}{
		(*ImageRequest_Url)(nil),
		(*ImageRequest_Data)(nil),
	}
}

func _ImageRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ImageRequest)
	// source
	switch x := m.Source.(type) {
	case *ImageRequest_Url:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Url)
	case *ImageRequest_Data:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Data)
	case nil:
	default:
		return fmt.Errorf("ImageRequest.Source has unexpected type %T", x)
	}
	return nil
}

func _ImageRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ImageRequest)
	switch tag {
	case 1: // source.url
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Source = &ImageRequest_Url{x}
		return true, err
	case 2: // source.data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Source = &ImageRequest_Data{x}
		return true, err
	default:
		return false, nil
	}
}

func _ImageRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ImageRequest)
	// source
	switch x := m.Source.(type) {
	case *ImageRequest_Url:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Url)))
		n += len(x.Url)
	case *ImageRequest_Data:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Data)))
		n += len(x.Data)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ImageResponse struct {
	Code   int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *ImageResponse) Reset()                    { *m = ImageResponse{} }
func (m *ImageResponse) String() string            { return proto.CompactTextString(m) }
func (*ImageResponse) ProtoMessage()               {}
func (*ImageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ImageResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ImageResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*DrawRequest)(nil), "services.DrawRequest")
	proto.RegisterType((*DrawResponse)(nil), "services.DrawResponse")
	proto.RegisterType((*TextRequest)(nil), "services.TextRequest")
	proto.RegisterType((*TextResponse)(nil), "services.TextResponse")
	proto.RegisterType((*ImageRequest)(nil), "services.ImageRequest")
	proto.RegisterType((*ImageResponse)(nil), "services.ImageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ImageSink service

type ImageSinkClient interface {
	Draw(ctx context.Context, in *DrawRequest, opts ...grpc.CallOption) (*DrawResponse, error)
}

type imageSinkClient struct {
	cc *grpc.ClientConn
}

func NewImageSinkClient(cc *grpc.ClientConn) ImageSinkClient {
	return &imageSinkClient{cc}
}

func (c *imageSinkClient) Draw(ctx context.Context, in *DrawRequest, opts ...grpc.CallOption) (*DrawResponse, error) {
	out := new(DrawResponse)
	err := grpc.Invoke(ctx, "/services.ImageSink/Draw", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImageSink service

type ImageSinkServer interface {
	Draw(context.Context, *DrawRequest) (*DrawResponse, error)
}

func RegisterImageSinkServer(s *grpc.Server, srv ImageSinkServer) {
	s.RegisterService(&_ImageSink_serviceDesc, srv)
}

func _ImageSink_Draw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageSinkServer).Draw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.ImageSink/Draw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageSinkServer).Draw(ctx, req.(*DrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImageSink_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.ImageSink",
	HandlerType: (*ImageSinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Draw",
			Handler:    _ImageSink_Draw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// Client API for Textd service

type TextdClient interface {
	Write(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextResponse, error)
}

type textdClient struct {
	cc *grpc.ClientConn
}

func NewTextdClient(cc *grpc.ClientConn) TextdClient {
	return &textdClient{cc}
}

func (c *textdClient) Write(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	out := new(TextResponse)
	err := grpc.Invoke(ctx, "/services.Textd/Write", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Textd service

type TextdServer interface {
	Write(context.Context, *TextRequest) (*TextResponse, error)
}

func RegisterTextdServer(s *grpc.Server, srv TextdServer) {
	s.RegisterService(&_Textd_serviceDesc, srv)
}

func _Textd_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextdServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.Textd/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextdServer).Write(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Textd_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.Textd",
	HandlerType: (*TextdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _Textd_Write_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// Client API for Imaged service

type ImagedClient interface {
	Show(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageResponse, error)
}

type imagedClient struct {
	cc *grpc.ClientConn
}

func NewImagedClient(cc *grpc.ClientConn) ImagedClient {
	return &imagedClient{cc}
}

func (c *imagedClient) Show(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageResponse, error) {
	out := new(ImageResponse)
	err := grpc.Invoke(ctx, "/services.Imaged/Show", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Imaged service

type ImagedServer interface {
	Show(context.Context, *ImageRequest) (*ImageResponse, error)
}

func RegisterImagedServer(s *grpc.Server, srv ImagedServer) {
	s.RegisterService(&_Imaged_serviceDesc, srv)
}

func _Imaged_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagedServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.Imaged/Show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagedServer).Show(ctx, req.(*ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Imaged_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.Imaged",
	HandlerType: (*ImagedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Show",
			Handler:    _Imaged_Show_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

func init() { proto.RegisterFile("services.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xcf, 0x4f, 0xf2, 0x40,
	0x10, 0x2d, 0x5f, 0x4b, 0x3f, 0x3a, 0x54, 0x0f, 0x13, 0x85, 0x86, 0xc4, 0x84, 0xf4, 0xc4, 0x89,
	0x03, 0x1e, 0xfc, 0x75, 0x12, 0x38, 0xe0, 0x75, 0x31, 0x31, 0x9e, 0x4c, 0x69, 0x57, 0x6c, 0x04,
	0x16, 0x77, 0xb7, 0x82, 0xff, 0xbd, 0xd9, 0x69, 0x8b, 0x1b, 0x3d, 0xe9, 0xa9, 0xf3, 0xde, 0xec,
	0xbc, 0x79, 0x79, 0x53, 0x38, 0x56, 0x5c, 0xbe, 0xe7, 0x29, 0x57, 0xc3, 0xad, 0x14, 0x5a, 0x60,
	0xab, 0xc6, 0xf1, 0x23, 0xb4, 0xa7, 0x32, 0xd9, 0x31, 0xfe, 0x56, 0x70, 0xa5, 0xb1, 0x07, 0xad,
	0xad, 0xcc, 0x85, 0xcc, 0xf5, 0x47, 0xd4, 0xe8, 0x37, 0x06, 0x2e, 0x3b, 0x60, 0xd3, 0xd3, 0xf9,
	0x9a, 0xab, 0x95, 0xd0, 0xd1, 0xbf, 0xb2, 0x57, 0x63, 0x44, 0xf0, 0xb2, 0x44, 0x27, 0x91, 0xdb,
	0x6f, 0x0c, 0x42, 0x46, 0x75, 0x7c, 0x0d, 0x61, 0x29, 0xad, 0xb6, 0x62, 0xa3, 0xb8, 0x79, 0x93,
	0x8a, 0x8c, 0x93, 0x6e, 0x93, 0x51, 0x8d, 0x1d, 0xf0, 0x95, 0x4e, 0x74, 0xa1, 0x48, 0x31, 0x60,
	0x15, 0x8a, 0xd7, 0xd0, 0xbe, 0xe7, 0x7b, 0x5d, 0xdb, 0x42, 0xf0, 0x34, 0xdf, 0x6b, 0x1a, 0x0d,
	0x18, 0xd5, 0x86, 0x7b, 0x16, 0x1b, 0x5d, 0x0d, 0x52, 0x8d, 0x67, 0x00, 0xe6, 0xfb, 0x94, 0x8a,
	0x95, 0x90, 0x64, 0xc6, 0x65, 0x81, 0x61, 0x26, 0x86, 0xc0, 0x2e, 0xfc, 0xa7, 0xf6, 0x62, 0x19,
	0x79, 0xd4, 0xf3, 0x0d, 0x1c, 0x2f, 0x8d, 0xd5, 0x72, 0xdd, 0x1f, 0xac, 0x8e, 0x21, 0xbc, 0x5b,
	0x27, 0x4b, 0xfe, 0xe5, 0xd5, 0x2d, 0xe4, 0xaa, 0xb4, 0x3a, 0x73, 0x98, 0x01, 0x78, 0x52, 0xc5,
	0x63, 0x26, 0xc3, 0x99, 0x53, 0x06, 0x34, 0x6e, 0x81, 0xaf, 0x44, 0x21, 0x53, 0x1e, 0xdf, 0xc0,
	0x51, 0xa5, 0xf1, 0x7b, 0x03, 0xa3, 0x29, 0x04, 0x34, 0x3c, 0xcf, 0x37, 0xaf, 0x78, 0x01, 0x9e,
	0x09, 0x1d, 0x4f, 0x87, 0x87, 0x93, 0x5b, 0xf7, 0xed, 0x75, 0xbe, 0xd3, 0xe5, 0xbe, 0xd8, 0x19,
	0xdd, 0x42, 0xd3, 0x44, 0x90, 0xe1, 0x25, 0x34, 0x1f, 0x64, 0xae, 0xb9, 0x2d, 0x61, 0xdd, 0xc2,
	0x96, 0xb0, 0x33, 0x8b, 0x9d, 0xd1, 0x04, 0x7c, 0x32, 0x92, 0xe1, 0x15, 0x78, 0xf3, 0x17, 0xb1,
	0x43, 0xeb, 0xad, 0x9d, 0x51, 0xaf, 0xfb, 0x83, 0xaf, 0x45, 0x16, 0x3e, 0xfd, 0xa1, 0xe7, 0x9f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xe5, 0xe9, 0x5d, 0x5e, 0xb3, 0x02, 0x00, 0x00,
}
